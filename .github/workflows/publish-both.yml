name: Publish Package

on:
  release:
    types: [published]
  workflow_dispatch: # Allow manual trigger

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # For PyPI trusted publishing

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        if: github.event_name == 'release'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

      - name: Publish to GitHub Packages
        run: |
          # For GitHub Packages, we need to use a different approach
          # GitHub Packages for Python is not as straightforward as PyPI

          # First, let's create a setup.py if it doesn't exist
          if [ ! -f setup.py ]; then
            echo 'from setuptools import setup' > setup.py
            echo 'setup()' >> setup.py
          fi

          # Publish to GitHub Packages using the GitHub token
          python -m twine upload \
            --repository-url https://maven.pkg.github.com/novasolve/ci-auto-rescue \
            --username ${{ github.actor }} \
            --password ${{ secrets.GITHUB_TOKEN }} \
            dist/* || echo "GitHub Packages upload failed - this is expected for Python packages"
