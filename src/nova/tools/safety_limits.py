"""
Safety limits for Nova CI-Rescue operations.
Configures maximum allowed changes to prevent accidental large-scale modifications.
"""

from typing import Optional
from pathlib import Path


class SafetyLimits:
    """Safety limits for patch application and PR operations."""

    def __init__(self):
        # Maximum allowed changes
        self.max_lines_changed = 500  # Increased from 200
        self.max_files_modified = 25  # Increased from 10

        # Restricted paths that should trigger extra caution
        self.restricted_paths = [
            ".github/workflows/",
            ".github/actions/",
            "Dockerfile",
            "docker-compose.yml",
            "requirements.txt",
            "pyproject.toml",
            "setup.py",
            "Makefile",
            ".env",
            ".env.local",
            ".env.*",
            "secrets/",
            ".secrets/",
            "config/",
            "deploy/",
            "infrastructure/",
            "terraform/",
            "helm/",
            "kubernetes/",
        ]

    def check_limits(self, changed_files: list, lines_changed: int) -> tuple[bool, str]:
        """
        Check if the proposed changes violate safety limits.

        Args:
            changed_files: List of modified file paths
            lines_changed: Total number of lines changed

        Returns:
            tuple: (is_safe, message)
        """
        violations = []

        # Check line limit
        if lines_changed > self.max_lines_changed:
            violations.append(
                f"Maximum lines changed: {self.max_lines_changed} "
                f"(current: {lines_changed})"
            )

        # Check file limit
        if len(changed_files) > self.max_files_modified:
            violations.append(
                f"Maximum files modified: {self.max_files_modified} "
                f"(current: {len(changed_files)})"
            )

        # Check restricted paths
        restricted_modified = []
        for file_path in changed_files:
            for restricted_path in self.restricted_paths:
                if restricted_path in file_path or file_path.startswith(restricted_path):
                    restricted_modified.append(file_path)
                    break

        if restricted_modified:
            violations.append(
                f"Restricted paths modified: {', '.join(restricted_modified[:3])}"
                f"{'...' if len(restricted_modified) > 3 else ''}"
            )

        if violations:
            message = (
                "üõ°Ô∏è Nova CI-Rescue Safety Check\n"
                "‚ùå Safety check failed\n\n"
                "This operation violates safety limits and cannot be automatically applied.\n\n"
                "‚ÑπÔ∏è Safety Limits\n"
                "Current safety limits:\n\n"
                f"Maximum lines changed: {self.max_lines_changed}\n"
                f"Maximum files modified: {self.max_files_modified}\n"
                f"Restricted paths: CI/CD configs, deployment files, secrets, etc.\n\n"
                "Violations:\n" + "\n".join(f"‚Ä¢ {v}" for v in violations) + "\n\n"
                "Generated by Nova CI-Rescue Safety Check"
            )
            return False, message

        return True, "‚úÖ All safety checks passed"


class SafetyConfig:
    """Configuration for safety limits."""

    def __init__(self, config_file: Optional[Path] = None):
        self.safety_limits = SafetyLimits()

        # Load from config file if provided
        if config_file and config_file.exists():
            # TODO: Load safety limits from YAML config
            pass
